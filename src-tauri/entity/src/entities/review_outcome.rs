//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "review_outcome")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub letter_variant_id: String,
    pub review_type: String,
    pub date: String,
    pub outcome: String,
    pub ms_time_taken: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::letter_variant::Entity",
        from = "Column::LetterVariantId",
        to = "super::letter_variant::Column::Id",
        on_update = "Cascade",
        on_delete = "NoAction"
    )]
    LetterVariant,
}

impl Related<super::letter_variant::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LetterVariant.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
